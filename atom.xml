<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>king</title>
  <icon>https://www.gravatar.com/avatar/b632fbfcb6a73936c984516f7ef7880e</icon>
  <subtitle>盛年不重来，一日难再晨</subtitle>
  <link href="http://sjhfuigashgrs.github.io/atom.xml" rel="self"/>
  
  <link href="http://sjhfuigashgrs.github.io/"/>
  <updated>2022-11-01T17:34:59.326Z</updated>
  <id>http://sjhfuigashgrs.github.io/</id>
  
  <author>
    <name>king</name>
    <email>3511896104@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js节流与防抖</title>
    <link href="http://sjhfuigashgrs.github.io/posts/81e2.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/81e2.html</id>
    <published>2022-10-28T16:07:05.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="节流与防抖的理解"><a href="#节流与防抖的理解" class="headerlink" title="节流与防抖的理解"></a>节流与防抖的理解</h2><p><strong>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求.</strong></p><p><strong>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率.</strong></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>1、防抖函数: 按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次.<br>2、服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次.</p><h2 id="实现节流函数和防抖函数"><a href="#实现节流函数和防抖函数" class="headerlink" title="实现节流函数和防抖函数"></a>实现节流函数和防抖函数</h2><blockquote><p><strong>防抖函数的实现</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>,</span><br><span class="line">            args = [...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果此时存在定时器的话, 则取消之前的定时器重新计时</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置定时器, 使事件间隔指定时间后执行</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><strong>节流函数的实现</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间戳版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> preTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>,</span><br><span class="line">            args = [...<span class="variable language_">arguments</span>],</span><br><span class="line">            nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果两次时间间隔超过了指定时间, 则执行函数</span></span><br><span class="line">        <span class="keyword">if</span> (nowTime - preTime &gt;= delay) &#123;</span><br><span class="line">            preTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时器版</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="variable language_">this</span>,</span><br><span class="line">            args = [...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有定时器, 则创建一个定时器</span></span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;节流与防抖的理解&quot;&gt;&lt;a href=&quot;#节流与防抖的理解&quot; class=&quot;headerlink&quot; title=&quot;节流与防抖的理解&quot;&gt;&lt;/a&gt;节流与防抖的理解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>脚本延迟加载的方式有哪些?</title>
    <link href="http://sjhfuigashgrs.github.io/posts/4e7d.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/4e7d.html</id>
    <published>2022-10-28T13:26:12.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<p><strong>延迟加载就是等页面加载完成之后再加载 <code>JavaScript</code> 文件。<code>js</code> 延迟加载有助于提高页面加载速度。一般有以下几种方式：</strong></p><p>1、<code>defer</code> 属性：给 js 脚本添加 <code>defer</code> 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 <code>defer</code> 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样.</p><p>2、<code>async</code> 属性：给 <code>js</code> 脚本添加 <code>async</code> 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 <code>js</code>脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 <code>async</code>属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。动态创建 <code>DOM</code> 方式：动态创建 <code>DOM</code> 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 <code>script</code> 标签来引入<code>js</code> 脚本.</p><p>3、使用 <code>setTimeout</code> 延迟方法：设置一个定时器来延迟加载 <code>js</code> 脚本文件让 <code>JS</code> 最后加载：将 <code>js</code> 脚本放在文档的底部，来使 <code>js</code> 脚本尽可能的在最后来加载执行.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;延迟加载就是等页面加载完成之后再加载 &lt;code&gt;JavaScript&lt;/code&gt; 文件。&lt;code&gt;js&lt;/code&gt; 延迟加载有助于提高页面加载速度。一般有以下几种方式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;defer&lt;/code&gt; 属性：</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>for...in 和 for...of 的区别</title>
    <link href="http://sjhfuigashgrs.github.io/posts/7f31.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/7f31.html</id>
    <published>2022-10-28T13:14:00.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<p><code>for…of</code> 是 <code>ES6</code> 新增的遍历方式，允许遍历一个含有 <code>iterator</code> 接口的数据结构（数组、对象等）并且返回各项的值，和 <code>ES3</code> 中的 <code>for…in</code> 的区别如下<code>for…of</code> 遍历获取的是对象的值，<code>for…in</code> 获取的是对象的键名；</p><p><code>for… in</code> 会遍历对象的整个原型链，性能非常差不推荐使用，而<code>for … of</code> 只遍历当前对象不会遍历原型链；对于数组的遍历，<code>for…in</code> 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，<code>for…of</code>只返回数组的下标对应的属性值；</p><p><strong>总结：<code>for...in</code> 循环主要是为了遍历对象而生，不适用于遍历数组；<br><code>for...of</code> 循环可以用来遍历数组、类数组对象，<code>字符串</code>、<code>Set</code>、<code>Map</code> 以<br>及 <code>Generator</code> 对象</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;for…of&lt;/code&gt; 是 &lt;code&gt;ES6&lt;/code&gt; 新增的遍历方式，允许遍历一个含有 &lt;code&gt;iterator&lt;/code&gt; 接口的数据结构（数组、对象等）并且返回各项的值，和 &lt;code&gt;ES3&lt;/code&gt; 中的 &lt;code&gt;for…in&lt;</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue2朝花夕拾</title>
    <link href="http://sjhfuigashgrs.github.io/posts/d225.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/d225.html</id>
    <published>2022-10-19T01:19:48.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<p>以下文章来源于前端之神 ，作者林三心不学挖掘机，喝水不忘挖井人</p><div class="tag link"><a class="link-card" title="前端之神" href="https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg"><div class="left"><img src="https://wx.qlogo.cn/mmhead/Q3auHgzwzM6q3YPht9DZA4H4ZPA0CibLbzehSIAUd0DEPyWwCdhUuzg/0"/></div><div class="right"><p class="text">前端之神</p><p class="url">https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg</p></div></a></div><h2 id="Vue-的优点？Vue-的缺点？"><a href="#Vue-的优点？Vue-的缺点？" class="headerlink" title="Vue 的优点？Vue 的缺点？"></a>Vue 的优点？Vue 的缺点？</h2><p><strong>优点：</strong></p><ul><li>渐进式</li><li>组件化开发</li><li>虚拟 dom</li><li>响应式数据</li><li>单页面路由</li><li>数据与视图分开</li></ul><p><strong>缺点：</strong></p><ul><li>单页面不利于 seo</li><li>不兼容 IE</li><li>首屏加载时间长</li></ul><h2 id="为什么说-Vue-是一个渐进式框架？"><a href="#为什么说-Vue-是一个渐进式框架？" class="headerlink" title="为什么说 Vue 是一个渐进式框架？"></a>为什么说 Vue 是一个渐进式框架？</h2><p>Vue 的全家桶，你可以选择不用，或者只选几样去用，比如不用 vuex</p><p><img src="https://img.wwery.com/Sugar/ZtlU7q7i.png" alt="图片"></p><h2 id="Vue-跟-React-的异同点？"><a href="#Vue-跟-React-的异同点？" class="headerlink" title="Vue 跟 React 的异同点？"></a>Vue 跟 React 的异同点？</h2><p><strong>相同点：</strong></p><ul><li>都是单向数据流</li><li>都使用了虚拟 DOM 的技术</li><li>都支持 SSR</li><li>组件化开发</li></ul><p><strong>不同点：</strong></p><ul><li>前者 template，后者 JSX</li><li>数据改变，前者响应式，后者手动 setState</li><li>React 单向绑定，Vue 双向绑定</li><li>React 状态管理工具 Redux、Mobx，Vue 状态管理工具 Vuex</li></ul><h2 id="MVVM-是什么？和-MVC-有何区别呢？"><a href="#MVVM-是什么？和-MVC-有何区别呢？" class="headerlink" title="MVVM 是什么？和 MVC 有何区别呢？"></a>MVVM 是什么？和 MVC 有何区别呢？</h2><p><strong>MVC</strong></p><ul><li>Model：负责从数据库中取数据</li><li>View：负责展示数据</li><li>Controller：用户交互的地方，例如点击事件</li><li>思想：Controller 将 Model 的数据展示在 View 上</li></ul><p><img src="https://img.wwery.com/Sugar/kTWOXVZl.png" alt="图片"></p><p><strong>MVVM</strong></p><ul><li>VM：就是 View-Model，数据双向绑定</li><li>Model：取数据的地方</li><li>View：展示数据的地方</li><li>思想：View 和 Model 实现数据同步，不需要手动更新</li></ul><blockquote><p>注意：Vue 不严格符合 MVVM，因为 MVVM 规定 Model 和 View 不能直接通信，而 Vue 可以使用<code>ref</code>进行通信</p></blockquote><p><img src="https://img.wwery.com/Sugar/sPomKmzf.png" alt="图片"></p><h2 id="Vue-和-JQuery-的区别在哪？为什么放弃-JQuery-用-Vue？"><a href="#Vue-和-JQuery-的区别在哪？为什么放弃-JQuery-用-Vue？" class="headerlink" title="Vue 和 JQuery 的区别在哪？为什么放弃 JQuery 用 Vue？"></a>Vue 和 JQuery 的区别在哪？为什么放弃 JQuery 用 Vue？</h2><ul><li>JQuery 直接操作 DOM，而 Vue 不直接操作 DOM，而是只需操作数据</li><li>Vue 的虚拟 DOM 技术，能适配多端</li><li>Vue 集成了一些库，大大提高开发效率，例如 Route、Vuex 等等</li></ul><h2 id="为什么-data-是个函数并且返回一个对象呢？"><a href="#为什么-data-是个函数并且返回一个对象呢？" class="headerlink" title="为什么 data 是个函数并且返回一个对象呢？"></a>为什么 data 是个函数并且返回一个对象呢？</h2><p>防止组件被多个页面使用时，造成的变量互相污染</p><h2 id="使用过哪些-Vue-的修饰符呢？"><a href="#使用过哪些-Vue-的修饰符呢？" class="headerlink" title="使用过哪些 Vue 的修饰符呢？"></a>使用过哪些 Vue 的修饰符呢？</h2><ul><li><code>.lazy</code>：输入框失焦时才会更新 v-model 的值</li><li><code>.trim</code>：讲 v-model 绑定的值首位空格给去掉</li><li><code>.number</code>：将 v-medol 绑定的值转数字</li><li><code>.stop</code>：阻止事件冒泡</li><li><code>.capture</code>：事件的捕获</li><li><code>.self</code>：点击事件绑定本身才触发</li><li><code>.once</code>：事件只触发一次</li><li><code>.prevent</code>：阻止默认事件</li><li><code>.native</code>：绑定事件在自定义组件上时，确保能执行</li><li><code>.left、.middle、.right</code>：鼠标左中右键的触发</li><li><code>passive</code>：相当于给移动端滚动事件加一个<code>.lazy</code></li><li><code>camel</code>：确保变量名会被识别成驼峰命名</li><li><code>.sync</code>：简化子修改父值的步骤</li></ul><h2 id="路由的几种模式？"><a href="#路由的几种模式？" class="headerlink" title="路由的几种模式？"></a>路由的几种模式？</h2><ul><li>hash：哈希模式，根据 hash 值的更改进行组件切换，而不刷新页面</li><li>history：历史模式，依赖于 HTML5 的 pushState 和 replaceState</li><li>abstract：适用于 Node</li></ul><h2 id="路由的钩子函数？"><a href="#路由的钩子函数？" class="headerlink" title="路由的钩子函数？"></a>路由的钩子函数？</h2><p><strong>全局钩子</strong></p><ul><li><p>beforeEach：跳转路由前</p></li><li><ul><li>to：将要跳转进入的路由对象</li><li>from：将要离开的路由对象</li><li>next：执行跳转的方法</li></ul></li><li><p>afterEach：路由跳转后</p></li><li><ul><li>to：将要跳转进入的路由对象</li></ul></li></ul><p><strong>路由独享钩子</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/xxx&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: xxx,</span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>组件内路由钩子</strong></p><ul><li>beforeRouteEnter(to, from, next)：跳转路由渲染组件时触发</li><li>beforeRouteUpdate(to, from, next)：跳转路由且组件被复用时触发</li><li>beforeRouteLeave(to, from, next)：跳转路由且离开组件时触发</li></ul><h2 id="使用过哪些-Vue-的内部指令呢？"><a href="#使用过哪些-Vue-的内部指令呢？" class="headerlink" title="使用过哪些 Vue 的内部指令呢？"></a>使用过哪些 Vue 的内部指令呢？</h2><ul><li><code>v-text</code>：元素的 textContent</li><li><code>v-html</code>：元素的 innerHTML</li><li><code>v-show</code>：通过样式 display 改变显隐</li><li><code>v-if</code>：通过操作 DOM 改变显隐</li><li><code>v-else</code>：配合 v-if</li><li><code>v-else-id</code>：配合 v-else</li><li><code>v-for</code>：循环渲染</li><li><code>v-on</code>：绑定事件，缩写@</li><li><code>v-bind</code>：绑定变量，缩写:</li><li><code>v-model</code>：双向绑定</li><li><code>v-slot</code>：插槽</li><li><code>v-once</code>：只渲染一次</li><li><code>v-pre</code>：跳过元素编译</li><li><code>v-cloak</code>：隐藏双括号，有值再显示</li></ul><h2 id="组件之间的传值方式有哪些？"><a href="#组件之间的传值方式有哪些？" class="headerlink" title="组件之间的传值方式有哪些？"></a>组件之间的传值方式有哪些？</h2><ul><li>父传子，子组件通过<code>props</code>接收</li><li>子传父，子组件使用<code>$emit</code>对父组件进行传值</li><li>父子之间通过<code>$parent</code>和<code>$chidren</code>获取实例进而通信</li><li>通过<code>vuex</code>进行状态管理</li><li>通过<code>eventBus</code>进行跨组件值传递</li><li><code>provide</code>和<code>inject</code>，官方不建议使用</li><li><code>$ref</code>获取实例，进而传值</li><li>路由传值</li><li>localStorage、sessionStorage</li></ul><h2 id="如何设置动态-class，动态-style？"><a href="#如何设置动态-class，动态-style？" class="headerlink" title="如何设置动态 class，动态 style？"></a>如何设置动态 class，动态 style？</h2><ul><li>动态 class 对象：<code>&lt;div :class=&quot;&#123; &#39;is-active&#39;: true, &#39;red&#39;: isRed &#125;&quot;&gt;&lt;/div&gt;</code></li><li>动态 class 数组：<code>&lt;div :class=&quot;[&#39;is-active&#39;, isRed ? &#39;red&#39; : &#39;&#39; ]&quot;&gt;&lt;/div&gt;</code></li><li>动态 style 对象：<code>&lt;div :style=&quot;&#123; color: textColor, fontSize: &#39;18px&#39; &#125;&quot;&gt;&lt;/div&gt;</code></li><li>动态 style 数组：`</li></ul><h2 id="v-if-和-v-show-有何区别？"><a href="#v-if-和-v-show-有何区别？" class="headerlink" title="v-if 和 v-show 有何区别？"></a>v-if 和 v-show 有何区别？</h2><ul><li><code>v-if</code>：通过操作 DOM 来控制显隐，适用于偶尔显隐的情况</li><li><code>v-show</code>：通过改变样式 display 属性控制显隐，适用于频繁显隐的情况</li></ul><h2 id="computed-和-watch-有何区别？"><a href="#computed-和-watch-有何区别？" class="headerlink" title="computed 和 watch 有何区别？"></a>computed 和 watch 有何区别？</h2><ul><li><code>computed</code>：依赖多个变量计算出一个变量，且具有缓存机制，依赖值不变的情况下，会复用计算值。<code>computed</code>中不能进行异步操作</li><li><code>watch</code>：通常监听一个变量的变化，而去做一些事，可异步操作</li><li>简单记就是：一般情况下<code>computed</code>的多对一，<code>watch</code>一对多</li></ul><h2 id="Vue-的生命周期，讲一讲？"><a href="#Vue-的生命周期，讲一讲？" class="headerlink" title="Vue 的生命周期，讲一讲？"></a>Vue 的生命周期，讲一讲？</h2><ul><li><code>beforeCreate</code>：实例 Vue，未初始化和响应式数据</li><li><code>created</code>：已初始化和响应式数据，可访问数据</li><li><code>beforeMount</code>：render 调用，虚拟 DOM 生成，未转真实 DOM</li><li><code>mounted</code>：真实 DOM 挂载完成</li><li><code>beforeUpdate</code>：数据更新，新虚拟 DOM 生成</li><li><code>updated</code>：新旧虚拟 DOM 进行对比，打补丁，然后进行真实 DOM 更新</li><li><code>beforeDestroy</code>：实例销毁前，仍可访问数据</li><li><code>destroy</code>：实例销毁，子实例销毁，指令解绑，解绑本实例的事件</li><li><code>activated</code>：keep-alive 所缓存组件激活时调用</li><li><code>deactivated</code>：keep-alive 所缓存组件停用时调用</li><li><code>errorCaptured</code>：子孙组件的错误捕获，此函数可返回 false 阻止继续向上传播</li></ul><h2 id="为什么-v-if-和-v-for-不建议用在同一标签？"><a href="#为什么-v-if-和-v-for-不建议用在同一标签？" class="headerlink" title="为什么 v-if 和 v-for 不建议用在同一标签？"></a>为什么 v-if 和 v-for 不建议用在同一标签？</h2><p><code>v-for</code>优先级高于<code>v-if</code>，每项都通过<code>v-for</code>渲染出来后再去通过<code>v-if</code>判断显隐，做了很多无用功</p><h2 id="vuex-的有哪些属性？用处是什么？"><a href="#vuex-的有哪些属性？用处是什么？" class="headerlink" title="vuex 的有哪些属性？用处是什么？"></a>vuex 的有哪些属性？用处是什么？</h2><ul><li><code>state</code>：定义初始状态</li><li><code>getter</code>：从 store 从取数据</li><li><code>mutation</code>：更改 store 中状态，只能同步操作</li><li><code>action</code>：用于提交 mutation，而不直接更改状态，可异步操作</li><li><code>module</code>：store 的模块拆分</li></ul><p><img src="https://img.wwery.com/Sugar/J0KxCxiy.png" alt="图片"></p><h2 id="不需要响应式的数据应该怎么处理？"><a href="#不需要响应式的数据应该怎么处理？" class="headerlink" title="不需要响应式的数据应该怎么处理？"></a>不需要响应式的数据应该怎么处理？</h2><ul><li>定义在 data 的 return 之外</li><li>使用 Object.freeze 进行数据冻结</li></ul><h2 id="watch-有哪些属性，分别有什么用？"><a href="#watch-有哪些属性，分别有什么用？" class="headerlink" title="watch 有哪些属性，分别有什么用？"></a>watch 有哪些属性，分别有什么用？</h2><ul><li>immediate：初次加载时立即执行</li><li>deep：是否进行深度监听</li><li>handler：监听的回调函数</li></ul><h2 id="父子组件生命周期顺序？"><a href="#父子组件生命周期顺序？" class="headerlink" title="父子组件生命周期顺序？"></a>父子组件生命周期顺序？</h2><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><h2 id="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"><a href="#对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？" class="headerlink" title="对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？"></a>对象新属性无法更新视图，删除属性无法更新视图，为什么？怎么办？</h2><ul><li><p>原因：Object.defineProperty 没有对对象的新属性进行劫持</p></li><li><p>解决：</p></li><li><ul><li>新增属性：<code>Vue.set(target, key, value)</code></li><li>删除属性：<code>Vue.delete(target, key)</code></li></ul></li></ul><h2 id="直接-arr-index-xxx-无法更新视图怎么办？为什么？怎么办？"><a href="#直接-arr-index-xxx-无法更新视图怎么办？为什么？怎么办？" class="headerlink" title="直接 arr[index] = xxx 无法更新视图怎么办？为什么？怎么办？"></a>直接 arr[index] = xxx 无法更新视图怎么办？为什么？怎么办？</h2><ul><li><p>原因：Vue 出于性能考虑没有对数组下标进行劫持，而是通过改写数组原型方法</p></li><li><p>解决：</p></li><li><ul><li><code>splice：arr.splice(index, 1, value)</code></li><li><code>Vue.set(target, index, value)</code></li></ul></li></ul><h2 id="插槽的使用以及原理？"><a href="#插槽的使用以及原理？" class="headerlink" title="插槽的使用以及原理？"></a>插槽的使用以及原理？</h2><blockquote><p>具体：<a href="https://juejin.cn/post/6949848530781470733">https://juejin.cn/post/6949848530781470733</a></p></blockquote><p><strong>普通插槽</strong> 普通插槽<code>slot</code>会被当做子元素进行解析，最终会被解析成一个<code>_t</code>函数，他接收的第一个参数为插槽的名称，默认是<code>default</code>，也就是<code>_t(&#39;default&#39;)</code>，执行此函数进行最终元素的渲染，如果是具名插槽，则传对应的插槽名 <strong>作用域插槽</strong> 插槽会被封装成一个函数放置在<code>scopeSlotes</code>对象中，解析时<code>_t</code>第二个参数接收子组件的数据，并进行渲染</p><h2 id="为什么不建议用-index-做-key，为什么不建议用随机数做-key？"><a href="#为什么不建议用-index-做-key，为什么不建议用随机数做-key？" class="headerlink" title="为什么不建议用 index 做 key，为什么不建议用随机数做 key？"></a>为什么不建议用 index 做 key，为什么不建议用随机数做 key？</h2><p>举个例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span> :key=<span class="string">&quot;index&quot;</span>&gt;&#123;&#123;item.<span class="property">name</span>&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">list</span>: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;124&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;小花&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;125&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">渲染为</span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小明&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">现在我执行 list.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;122&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">渲染为</span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">新旧对比</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;0&quot;</span>&gt;小明&lt;<span class="regexp">/div&gt;  &lt;div key=&quot;0&quot;&gt;小林&lt;/</span>div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                         <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;3&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">可以看出，如果用index做key的话，其实是更新了原有的三项，并新增了小花，虽然达到了渲染目的，但是损耗性能</span><br><span class="line"></span><br><span class="line">现在我们使用id来做key，渲染为</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;123&quot;</span>&gt;小明&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">现在我执行 list.<span class="title function_">unshift</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;小林&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;122&#x27;</span> &#125;)，渲染为</span><br><span class="line"></span><br><span class="line">&lt;div key=<span class="string">&quot;122&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">新旧对比</span><br><span class="line"></span><br><span class="line">                           &lt;div key=<span class="string">&quot;122&quot;</span>&gt;小林&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;123&quot;</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;124&quot;</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&quot;125&quot;</span>&gt;</span>小花<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">可以看出，原有的三项都不变，只是新增了小林这个人，这才是最理想的结果</span><br></pre></td></tr></table></figure><p>用<code>index</code>和用<code>随机数</code>都是同理，<code>随机数</code>每次都在变，做不到专一性，很<code>渣男</code>，也很消耗性能，所以，拒绝<code>渣男</code>，选择<code>老实人</code></p><h2 id="自定义指令的钩子函数？"><a href="#自定义指令的钩子函数？" class="headerlink" title="自定义指令的钩子函数？"></a>自定义指令的钩子函数？</h2><p>这里只说 Vue2 的</p><ul><li><code>bind</code>：指令绑定到指定元素时调用，只调用一次</li><li><code>inserted</code>：指定元素插入父节点时调用</li><li><code>update</code>：所在组件的 VNode 更新时调用</li><li><code>componnetUpdated</code>：所在组件以及其子组件 VNode 全部更新后调用</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用</li></ul><h2 id="说说-nextTick-的用处？"><a href="#说说-nextTick-的用处？" class="headerlink" title="说说 nextTick 的用处？"></a>说说 nextTick 的用处？</h2><p>修改数据时不能马上得到最新的 DOM 信息，所以需要使用 nextTick，在 nectTick 回调中可以获取最新 DOM 信息</p><h2 id="为什么-nextTick-优先是微任务？"><a href="#为什么-nextTick-优先是微任务？" class="headerlink" title="为什么 nextTick 优先是微任务？"></a>为什么 nextTick 优先是微任务？</h2><p>优先是<code>Promise.then</code>方法，是个微任务，这样可以避免多一次队列，进而少一次 UI 渲染，节省性能</p><h2 id="Vue-的-SSR-是什么？有什么好处？"><a href="#Vue-的-SSR-是什么？有什么好处？" class="headerlink" title="Vue 的 SSR 是什么？有什么好处？"></a>Vue 的 SSR 是什么？有什么好处？</h2><p>SSR 全称<code>Server Side Render</code></p><ul><li>有利于 SEO：由于是在服务端，将数据填充进 HTML 之后再推送到浏览器，所以有利于 SEO 的爬取</li><li>首屏渲染快</li></ul><h2 id="Vue-响应式是怎么实现的？"><a href="#Vue-响应式是怎么实现的？" class="headerlink" title="Vue 响应式是怎么实现的？"></a>Vue 响应式是怎么实现的？</h2><ul><li>1、劫持：通过<code>Object.defineProperty</code>对对象进行递归劫持属性的<code>get、set</code></li><li>2、观察者模式：使用<code>watcher</code>进行观察数据使用的地方</li><li>3、发布订阅模式：使用<code>dep</code>收集<code>watcher</code>，数据更改时，通过<code>notify</code>方法通知<code>dep</code>里的<code>watcher</code>去进行相应的更新</li><li>4、数组：数组没有使用劫持的模式，而是通过重写数组原型上的方法，来实现数组的响应式</li></ul><h2 id="为什么只对对象劫持，而要对数组进行方法重写？"><a href="#为什么只对对象劫持，而要对数组进行方法重写？" class="headerlink" title="为什么只对对象劫持，而要对数组进行方法重写？"></a>为什么只对对象劫持，而要对数组进行方法重写？</h2><p>数组的元素大概率是成百上千的，所以对数组下标进行劫持的话会非常消耗性能。Vue 通过对数组原型上方法的重写，实现数组的响应式</p><h2 id="Vue-的模板编译原理？"><a href="#Vue-的模板编译原理？" class="headerlink" title="Vue 的模板编译原理？"></a>Vue 的模板编译原理？</h2><blockquote><p>具体：<a href="https://juejin.cn/post/6969563640416436232">https://juejin.cn/post/6969563640416436232</a></p></blockquote><h2 id="Vue-的-computed-和-watch-的原理？"><a href="#Vue-的-computed-和-watch-的原理？" class="headerlink" title="Vue 的 computed 和 watch 的原理？"></a>Vue 的 computed 和 watch 的原理？</h2><blockquote><p>具体：<a href="https://juejin.cn/post/6974293549135167495">https://juejin.cn/post/6974293549135167495</a></p></blockquote><h2 id="Vue-set-方法的原理？"><a href="#Vue-set-方法的原理？" class="headerlink" title="Vue.set 方法的原理？"></a>Vue.set 方法的原理？</h2><p>Vue.set(target, key, value)</p><ul><li><p>第一步：判断 target 是数组的话，则调用 target.splice(key, 1, value)</p></li><li><p>第二步：判断 target 是对象的话，再判断传入的 key 是否已存在 target 中</p></li><li><ul><li>是：直接 target[key] = value</li><li>否：调用 defineReactive(target, key, val)进行响应式处理</li></ul></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">        target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key);</span><br><span class="line">        target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val);</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ob = target.<span class="property">__ob__</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> target.<span class="property"><span class="keyword">prototype</span></span>)) || !ob) &#123;</span><br><span class="line">        target[key] = val;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">defineReactive</span>(target, key, val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-delete-方法的原理？"><a href="#Vue-delete-方法的原理？" class="headerlink" title="Vue.delete 方法的原理？"></a>Vue.delete 方法的原理？</h2><p>Vue.delete(target, key)</p><ul><li>第一步：判断 target 是否为数组，是的话调用 target.splice(key, 1)</li><li>第二步：判断 target 是对象的话，调用 delete 关键字删除属性，并调用<strong>ob</strong>.dep.notify 进行更新通知</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">        target.<span class="title function_">splice</span>(key, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ob = target.<span class="property">__ob__</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> target)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ob) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nextTick-的原理？"><a href="#nextTick-的原理？" class="headerlink" title="nextTick 的原理？"></a>nextTick 的原理？</h2><p>维护一个数组，每次调用时讲回调函数压入这个数组，然后优先选择微任务，在微任务回调中去执行数组中的所有回调，同时维护一个布尔值，确保每一次队列进行一次执行数组所有回调</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = []; <span class="comment">//回调函数</span></span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pending = <span class="literal">false</span>; <span class="comment">//把标志还原为false</span></span><br><span class="line">    <span class="comment">// 依次执行回调</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; callbacks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        callbacks[i]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timerFunc; <span class="comment">//先采用微任务并按照优先级优雅降级的方式实现异步刷新</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果支持promise</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// MutationObserver 主要是监听dom变化 也是一个异步方法</span></span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks);</span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line">    observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">        <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        counter = (counter + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">        textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果前面都不支持 判断setImmediate</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setImmediate</span>(flushCallbacks);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 最后降级采用setTimeout</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    callbacks.<span class="title function_">push</span>(cb);</span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">        pending = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">timerFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说说-虚拟-dom-和-diff-算法-吧？"><a href="#说说-虚拟-dom-和-diff-算法-吧？" class="headerlink" title="说说 虚拟 dom 和 diff 算法 吧？"></a>说说 虚拟 dom 和 diff 算法 吧？</h2><p><strong>虚拟 dom</strong></p><p>虚拟 dom 是一个对象，一个描述真实 DOM 的对象，每次数据更新时，新旧虚拟 DOM 都会互相进行同层对比，而 diff 算法优化就是在此时做优化的。</p><p><strong>diff 算法</strong></p><ul><li><p>第一步：调用<code>patch</code>方法，传入新旧虚拟 DOM，开始同层对比</p></li><li><p>第二步：调用<code>isSameNode</code>方法，对比新旧节点是否同类型节点</p></li><li><p>第三步：如果不同，新节点直接代替旧节点</p></li><li><p>第四步：如果相同，调用<code>patchNode</code>进行对比节点</p></li><li><ul><li>如果旧节点和新节点都是文本节点，则新文本代替旧文本</li><li>如果旧节点有子节点，新节点没，则删除旧节点的子节点</li><li>如果旧节点没有子节点，新节点有，则把子节点新增上去</li><li>如果都有子节点，则调用<code>updateChildren</code>方法进行新旧子节点的对比</li><li>子节点对比为首尾对比法</li></ul></li></ul><h2 id="如果子组件改变-props-里的数据会发生什么？"><a href="#如果子组件改变-props-里的数据会发生什么？" class="headerlink" title="如果子组件改变 props 里的数据会发生什么？"></a>如果子组件改变 props 里的数据会发生什么？</h2><ul><li>基础类型：如果父传给子的是基础类型，修改则会报错</li><li>引用类型：如果父传给子的是引用类型，修改属性则会同时修改父组件数据</li></ul><h2 id="props-怎么自定义验证"><a href="#props-怎么自定义验证" class="headerlink" title="props 怎么自定义验证"></a>props 怎么自定义验证</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">num</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">          <span class="comment">// 返回值为false则验证不通过，报错</span></span><br><span class="line">          <span class="keyword">return</span> [</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">          ].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="watch-的-immediate-属性有什么用？"><a href="#watch-的-immediate-属性有什么用？" class="headerlink" title="watch 的 immediate 属性有什么用？"></a>watch 的 immediate 属性有什么用？</h2><p>Vue 实例初始化的时候立即调用 watch 的监听回调函数</p><h2 id="watch-监听一个对象时，如何排除某些属性的监听"><a href="#watch-监听一个对象时，如何排除某些属性的监听" class="headerlink" title="watch 监听一个对象时，如何排除某些属性的监听"></a>watch 监听一个对象时，如何排除某些属性的监听</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">params</span>)</span><br><span class="line">      .<span class="title function_">filter</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> ![<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>].<span class="title function_">includes</span>(_)) <span class="comment">// 排除对c，d属性的监听</span></span><br><span class="line">      .<span class="title function_">forEach</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$watch(<span class="function">(<span class="params">vm</span>) =&gt;</span> vm.<span class="property">params</span>[_], handler, &#123;</span><br><span class="line">          <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getList</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="审查元素时发现-data-v-xxxxx，这是啥？"><a href="#审查元素时发现-data-v-xxxxx，这是啥？" class="headerlink" title="审查元素时发现 data-v-xxxxx，这是啥？"></a>审查元素时发现 data-v-xxxxx，这是啥？</h2><p>样式模块化 scoped 的效果，在本组件的标签都会带上 data-v-xxx 的属性，然后通过属性选择器实现样式模块化的效果</p><h2 id="vue-的-hook-的使用？"><a href="#vue-的-hook-的使用？" class="headerlink" title="vue 的 hook 的使用？"></a>vue 的 hook 的使用？</h2><ul><li>同一组件中使用</li></ul><blockquote><p>这是我们常用的使用定时器的方式</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="attr">timer</span>:<span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//具体执行内容</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面做法不好的地方在于：得全局多定义一个 timer 变量，可以使用 hook 这么做：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//具体执行代码</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">            <span class="variable language_">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>父子组件使用</li></ul><blockquote><p>如果子组件需要在 mounted 时触发父组件的某一个函数，平时都会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;rl-child @childMounted=<span class="string">&quot;childMountedHandle&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line">method () &#123;</span><br><span class="line">  <span class="title function_">childMountedHandle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">mounted () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.$emit(<span class="string">&#x27;childMounted&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>使用 hook 的话可以更方便：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;rl-child @hook:mounted=&quot;childMountedHandle&quot; /&gt;</span><br><span class="line">method () &#123; childMountedHandle() &#123; // do something... &#125; &#125;,</span><br></pre></td></tr></table></figure><h2 id="provide-和-inject-是响应式的吗？"><a href="#provide-和-inject-是响应式的吗？" class="headerlink" title="provide 和 inject 是响应式的吗？"></a>provide 和 inject 是响应式的吗？</h2><p>引用数据类型响应式，基础数据类型不响应式</p><h2 id="Vue-的-el-属性和-mount-优先级？"><a href="#Vue-的-el-属性和-mount-优先级？" class="headerlink" title="Vue 的 el 属性和$mount 优先级？"></a>Vue 的 el 属性和$mount 优先级？</h2><p>同时存在时，<code>el &gt; $mount</code></p><p><img src="https://img.wwery.com/Sugar/fSxZPIhe.png" alt="图片"></p><h2 id="动态指令和参数使用过吗？"><a href="#动态指令和参数使用过吗？" class="headerlink" title="动态指令和参数使用过吗？"></a>动态指令和参数使用过吗？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;aButton @[someEvent]=&quot;handleSomeEvent()&quot; :[someProps]=&quot;1000&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="相同的路由组件如何重新渲染？"><a href="#相同的路由组件如何重新渲染？" class="headerlink" title="相同的路由组件如何重新渲染？"></a>相同的路由组件如何重新渲染？</h2><p>更改如有组件上的 key 即可</p><h2 id="自定义-v-model"><a href="#自定义-v-model" class="headerlink" title="自定义 v-model"></a>自定义 v-model</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="attr">default</span>: &#123;</span><br><span class="line">  <span class="attr">model</span>: &#123;</span><br><span class="line">    <span class="attr">event</span>: <span class="string">&#x27;change&#x27;</span>,</span><br><span class="line">    <span class="attr">prop</span>: <span class="string">&#x27;checked&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何将获取-data-中某一个数据的初始状态？"><a href="#如何将获取-data-中某一个数据的初始状态？" class="headerlink" title="如何将获取 data 中某一个数据的初始状态？"></a>如何将获取 data 中某一个数据的初始状态？</h2><p>使用<code>this.$options.data().xxx</code>获取初始值</p><h2 id="计算变量时，methods-和-computed-哪个好？"><a href="#计算变量时，methods-和-computed-哪个好？" class="headerlink" title="计算变量时，methods 和 computed 哪个好？"></a>计算变量时，methods 和 computed 哪个好？</h2><p>computed 比较好，computed 有缓存机制，可以节省性能。而 method 则每次更新都会重新计算，不考虑缓存</p><h2 id="router-push、router-replace、router-go-的区别？"><a href="#router-push、router-replace、router-go-的区别？" class="headerlink" title="router.push、router.replace、router.go 的区别？"></a>router.push、router.replace、router.go 的区别？</h2><ul><li><code>router.push</code>：跳转，并向 history 栈中加一个记录，可以后退到上一个页面</li><li><code>router.replace</code>：跳转，不会向 history 栈中加一个记录，不可以后退到上一个页面</li><li><code>router.go</code>：传正数向前跳转，传负数向后跳转</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下文章来源于前端之神 ，作者林三心不学挖掘机，喝水不忘挖井人&lt;/p&gt;
&lt;div class=&quot;tag link&quot;&gt;&lt;a class=&quot;link-card&quot; title=&quot;前端之神&quot; href=&quot;https://mp.weixin.qq.com/s/rqoZ5KWqT_1Q</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://sjhfuigashgrs.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>js工具方法</title>
    <link href="http://sjhfuigashgrs.github.io/posts/60d2.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/60d2.html</id>
    <published>2022-10-19T01:14:06.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言</p></blockquote><p>有些时候，我们会遇到一些<code>小难题</code>，但并不难，因为你只要肯花个时间，肯定是能解决的。你与其花这个时间，为何不快速解决之后，好继续写你的主要逻辑代码呢？</p><p>比如你要判断用户是否是<code>手机端</code>输入<code>邮箱\手机号码...</code> 是否合法，将数字转换成 <code>汉字</code>。。。</p><p><strong>“工欲善其事，必先利其器！’’下面列举出了一些 JS 中常用的工具方法，复制粘贴，岂不美滋滋？，有了这些开发工具你就可以高效的处理任务和信息了。</strong></p><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isEmail</span> = s =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/</span>.<span class="title function_">test</span>(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码"></a>手机号码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isMobile</span> = s =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^1[0-9]&#123;10&#125;$/</span>.<span class="title function_">test</span>(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a>电话号码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">export <span class="type">const</span> <span class="variable">isPhone</span> <span class="operator">=</span> (s) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> /^([<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">3</span>,<span class="number">4</span>&#125;-)?[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">7</span>,<span class="number">8</span>&#125;$/.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="是否-url-地址"><a href="#是否-url-地址" class="headerlink" title="是否 url 地址"></a>是否 url 地址</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isURL</span> = s =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^http[s]?:\/\/.*/</span>.<span class="title function_">test</span>(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否字符串"><a href="#是否字符串" class="headerlink" title="是否字符串"></a>是否字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isString</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;String&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否数字"><a href="#是否数字" class="headerlink" title="是否数字"></a>是否数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isNumber</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Number&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-boolean"><a href="#是否-boolean" class="headerlink" title="是否 boolean"></a>是否 boolean</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isBoolean</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Boolean&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否函数"><a href="#是否函数" class="headerlink" title="是否函数"></a>是否函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isFunction</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Function&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否为-null"><a href="#是否为-null" class="headerlink" title="是否为 null"></a>是否为 null</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isNull</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Null&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-undefined"><a href="#是否-undefined" class="headerlink" title="是否 undefined"></a>是否 undefined</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isUndefined</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Undefined&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否对象"><a href="#是否对象" class="headerlink" title="是否对象"></a>是否对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isObj</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Object&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否数组"><a href="#是否数组" class="headerlink" title="是否数组"></a>是否数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isArray</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Array&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否时间"><a href="#是否时间" class="headerlink" title="是否时间"></a>是否时间</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isDate</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Date&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否正则"><a href="#是否正则" class="headerlink" title="是否正则"></a>是否正则</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isRegExp</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;RegExp&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否错误对象"><a href="#是否错误对象" class="headerlink" title="是否错误对象"></a>是否错误对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isError</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Error&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-Symbol-函数"><a href="#是否-Symbol-函数" class="headerlink" title="是否 Symbol 函数"></a>是否 Symbol 函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isSymbol</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Symbol&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-Promise-对象"><a href="#是否-Promise-对象" class="headerlink" title="是否 Promise 对象"></a>是否 Promise 对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isPromise</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Promise&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-Set-对象"><a href="#是否-Set-对象" class="headerlink" title="是否 Set 对象"></a>是否 Set 对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isSet</span> = o =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(o).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&#x27;Set&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ua = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br></pre></td></tr></table></figure><h2 id="是否是微信浏览器"><a href="#是否是微信浏览器" class="headerlink" title="是否是微信浏览器"></a>是否是微信浏览器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isWeiXin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/microMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否是移动端"><a href="#是否是移动端" class="headerlink" title="是否是移动端"></a>是否是移动端</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isDeviceMobile</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/android|webos|iphone|ipod|balckberry/i</span>.<span class="title function_">test</span>(navigator.<span class="property">userAgent</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否是-QQ-浏览器"><a href="#是否是-QQ-浏览器" class="headerlink" title="是否是 QQ 浏览器"></a>是否是 QQ 浏览器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isQQBrowser</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> !!navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否是爬虫"><a href="#是否是爬虫" class="headerlink" title="是否是爬虫"></a>是否是爬虫</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isSpider</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/</span>.<span class="title function_">test</span>(</span><br><span class="line">        navigator.<span class="property">userAgent</span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否-ios"><a href="#是否-ios" class="headerlink" title="是否 ios"></a>是否 ios</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isIos</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Android&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Linux&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//安卓手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPhone&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//苹果手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;iPad&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//iPad</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Windows Phone&#x27;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//winphone手机</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="是否为-PC-端"><a href="#是否为-PC-端" class="headerlink" title="是否为 PC 端"></a>是否为 PC 端</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isPC</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> userAgentInfo = navigator.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Agents</span> = [<span class="string">&#x27;Android&#x27;</span>, <span class="string">&#x27;iPhone&#x27;</span>, <span class="string">&#x27;SymbianOS&#x27;</span>, <span class="string">&#x27;Windows Phone&#x27;</span>, <span class="string">&#x27;iPad&#x27;</span>, <span class="string">&#x27;iPod&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; <span class="title class_">Agents</span>.<span class="property">length</span>; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (userAgentInfo.<span class="title function_">indexOf</span>(<span class="title class_">Agents</span>[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="去除-html-标签"><a href="#去除-html-标签" class="headerlink" title="去除 html 标签"></a>去除 html 标签</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeHtmltag</span> = str =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取-url-参数"><a href="#获取-url-参数" class="headerlink" title="获取 url 参数"></a>获取 url 参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getQueryString</span> = name =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> search = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> r = search.<span class="title function_">match</span>(reg) || [];</span><br><span class="line">    <span class="keyword">return</span> r[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="动态引入-js"><a href="#动态引入-js" class="headerlink" title="动态引入 js"></a>动态引入 js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">injectScript</span> = src =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> s = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    s.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line">    s.<span class="property">async</span> = <span class="literal">true</span>;</span><br><span class="line">    s.<span class="property">src</span> = src;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    t.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(s, t);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="根据-url-地址下载"><a href="#根据-url-地址下载" class="headerlink" title="根据 url 地址下载"></a>根据 url 地址下载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">download</span> = url =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> isChrome = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;chrome&#x27;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> isSafari = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;safari&#x27;</span>) &gt; -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (isChrome || isSafari) &#123;</span><br><span class="line">        <span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        link.<span class="property">href</span> = url;</span><br><span class="line">        <span class="keyword">if</span> (link.<span class="property">download</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> fileName = url.<span class="title function_">substring</span>(url.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, url.<span class="property">length</span>);</span><br><span class="line">            link.<span class="property">download</span> = fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">createEvent</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="variable language_">document</span>.<span class="title function_">createEvent</span>(<span class="string">&#x27;MouseEvents&#x27;</span>);</span><br><span class="line">            e.<span class="title function_">initEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">            link.<span class="title function_">dispatchEvent</span>(e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">        url += <span class="string">&#x27;?download&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(url, <span class="string">&#x27;_self&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="el-是否包含某个-class"><a href="#el-是否包含某个-class" class="headerlink" title="el 是否包含某个 class"></a>el 是否包含某个 class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">hasClass</span> = (<span class="params">el, className</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(^|\\s)&#x27;</span> + className + <span class="string">&#x27;(\\s|$)&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(el.<span class="property">className</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="el-添加某个-class"><a href="#el-添加某个-class" class="headerlink" title="el 添加某个 class"></a>el 添加某个 class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">addClass</span> = (<span class="params">el, className</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasClass</span>(el, className)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newClass = el.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    newClass.<span class="title function_">push</span>(className);</span><br><span class="line">    el.<span class="property">className</span> = newClass.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="el-去除某个-class"><a href="#el-去除某个-class" class="headerlink" title="el 去除某个 class"></a>el 去除某个 class</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeClass</span> = (<span class="params">el, className</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">hasClass</span>(el, className)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(^|\\s)&#x27;</span> + className + <span class="string">&#x27;(\\s|$)&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">    el.<span class="property">className</span> = el.<span class="property">className</span>.<span class="title function_">replace</span>(reg, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="获取滚动的坐标"><a href="#获取滚动的坐标" class="headerlink" title="获取滚动的坐标"></a>获取滚动的坐标</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getScrollPosition</span> = (<span class="params">el = <span class="variable language_">window</span></span>) =&gt; (&#123;</span><br><span class="line">    <span class="attr">x</span>: el.<span class="property">pageXOffset</span> !== <span class="literal">undefined</span> ? el.<span class="property">pageXOffset</span> : el.<span class="property">scrollLeft</span>,</span><br><span class="line">    <span class="attr">y</span>: el.<span class="property">pageYOffset</span> !== <span class="literal">undefined</span> ? el.<span class="property">pageYOffset</span> : el.<span class="property">scrollTop</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">scrollToTop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(scrollToTop);</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="el-是否在视口范围内"><a href="#el-是否在视口范围内" class="headerlink" title="el 是否在视口范围内"></a>el 是否在视口范围内</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">elementIsVisibleInViewport</span> = (<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">return</span> partiallyVisible</span><br><span class="line">        ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">              ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">        : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="洗牌算法随机"><a href="#洗牌算法随机" class="headerlink" title="洗牌算法随机"></a>洗牌算法随机</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">shuffle</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],</span><br><span class="line">        random;</span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        random = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * arr.<span class="property">length</span>);</span><br><span class="line">        result.<span class="title function_">push</span>(arr[random]);</span><br><span class="line">        arr.<span class="title function_">splice</span>(random, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="劫持粘贴板"><a href="#劫持粘贴板" class="headerlink" title="劫持粘贴板"></a>劫持粘贴板</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">copyTextToClipboard</span> = value =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> textArea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;textarea&#x27;</span>);</span><br><span class="line">    textArea.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;transparent&#x27;</span>;</span><br><span class="line">    textArea.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textArea);</span><br><span class="line">    textArea.<span class="title function_">select</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> successful = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Oops, unable to copy&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textArea);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断类型集合"><a href="#判断类型集合" class="headerlink" title="判断类型集合"></a>判断类型集合</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">checkStr</span> = (<span class="params">str, type</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;phone&#x27;</span>: <span class="comment">//手机号码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;tel&#x27;</span>: <span class="comment">//座机</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;card&#x27;</span>: <span class="comment">//身份证</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>: <span class="comment">//密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]\w&#123;5,17&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;postal&#x27;</span>: <span class="comment">//邮政编码</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/[1-9]\d&#123;5&#125;(?!\d)/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;QQ&#x27;</span>: <span class="comment">//QQ号</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[1-9][0-9]&#123;4,9&#125;$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;email&#x27;</span>: <span class="comment">//邮箱</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;money&#x27;</span>: <span class="comment">//金额(小数点2位)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\d*(?:\.\d&#123;0,2&#125;)?$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;URL&#x27;</span>: <span class="comment">//网址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/</span>.<span class="title function_">test</span>(</span><br><span class="line">                str</span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;IP&#x27;</span>: <span class="comment">//IP</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/</span>.<span class="title function_">test</span>(</span><br><span class="line">                str</span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;date&#x27;</span>: <span class="comment">//日期时间</span></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/</span>.<span class="title function_">test</span>(str) ||</span><br><span class="line">                <span class="regexp">/^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/</span>.<span class="title function_">test</span>(str)</span><br><span class="line">            );</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>: <span class="comment">//数字</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;english&#x27;</span>: <span class="comment">//英文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;chinese&#x27;</span>: <span class="comment">//中文</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\\u4E00-\\u9FA5]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;lower&#x27;</span>: <span class="comment">//小写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;upper&#x27;</span>: <span class="comment">//大写</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;HTML&#x27;</span>: <span class="comment">//HTML标记</span></span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/</span>.<span class="title function_">test</span>(str);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="严格的身份证校验"><a href="#严格的身份证校验" class="headerlink" title="严格的身份证校验"></a>严格的身份证校验</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isCardID</span> = sId =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>.<span class="title function_">test</span>(sId)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你输入的身份证长度或格式错误&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//身份证城市</span></span><br><span class="line">    <span class="keyword">var</span> aCity = &#123;</span><br><span class="line">        <span class="number">11</span>: <span class="string">&#x27;北京&#x27;</span>,</span><br><span class="line">        <span class="number">12</span>: <span class="string">&#x27;天津&#x27;</span>,</span><br><span class="line">        <span class="number">13</span>: <span class="string">&#x27;河北&#x27;</span>,</span><br><span class="line">        <span class="number">14</span>: <span class="string">&#x27;山西&#x27;</span>,</span><br><span class="line">        <span class="number">15</span>: <span class="string">&#x27;内蒙古&#x27;</span>,</span><br><span class="line">        <span class="number">21</span>: <span class="string">&#x27;辽宁&#x27;</span>,</span><br><span class="line">        <span class="number">22</span>: <span class="string">&#x27;吉林&#x27;</span>,</span><br><span class="line">        <span class="number">23</span>: <span class="string">&#x27;黑龙江&#x27;</span>,</span><br><span class="line">        <span class="number">31</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">        <span class="number">32</span>: <span class="string">&#x27;江苏&#x27;</span>,</span><br><span class="line">        <span class="number">33</span>: <span class="string">&#x27;浙江&#x27;</span>,</span><br><span class="line">        <span class="number">34</span>: <span class="string">&#x27;安徽&#x27;</span>,</span><br><span class="line">        <span class="number">35</span>: <span class="string">&#x27;福建&#x27;</span>,</span><br><span class="line">        <span class="number">36</span>: <span class="string">&#x27;江西&#x27;</span>,</span><br><span class="line">        <span class="number">37</span>: <span class="string">&#x27;山东&#x27;</span>,</span><br><span class="line">        <span class="number">41</span>: <span class="string">&#x27;河南&#x27;</span>,</span><br><span class="line">        <span class="number">42</span>: <span class="string">&#x27;湖北&#x27;</span>,</span><br><span class="line">        <span class="number">43</span>: <span class="string">&#x27;湖南&#x27;</span>,</span><br><span class="line">        <span class="number">44</span>: <span class="string">&#x27;广东&#x27;</span>,</span><br><span class="line">        <span class="number">45</span>: <span class="string">&#x27;广西&#x27;</span>,</span><br><span class="line">        <span class="number">46</span>: <span class="string">&#x27;海南&#x27;</span>,</span><br><span class="line">        <span class="number">50</span>: <span class="string">&#x27;重庆&#x27;</span>,</span><br><span class="line">        <span class="number">51</span>: <span class="string">&#x27;四川&#x27;</span>,</span><br><span class="line">        <span class="number">52</span>: <span class="string">&#x27;贵州&#x27;</span>,</span><br><span class="line">        <span class="number">53</span>: <span class="string">&#x27;云南&#x27;</span>,</span><br><span class="line">        <span class="number">54</span>: <span class="string">&#x27;西藏&#x27;</span>,</span><br><span class="line">        <span class="number">61</span>: <span class="string">&#x27;陕西&#x27;</span>,</span><br><span class="line">        <span class="number">62</span>: <span class="string">&#x27;甘肃&#x27;</span>,</span><br><span class="line">        <span class="number">63</span>: <span class="string">&#x27;青海&#x27;</span>,</span><br><span class="line">        <span class="number">64</span>: <span class="string">&#x27;宁夏&#x27;</span>,</span><br><span class="line">        <span class="number">65</span>: <span class="string">&#x27;新疆&#x27;</span>,</span><br><span class="line">        <span class="number">71</span>: <span class="string">&#x27;台湾&#x27;</span>,</span><br><span class="line">        <span class="number">81</span>: <span class="string">&#x27;香港&#x27;</span>,</span><br><span class="line">        <span class="number">82</span>: <span class="string">&#x27;澳门&#x27;</span>,</span><br><span class="line">        <span class="number">91</span>: <span class="string">&#x27;国外&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!aCity[<span class="built_in">parseInt</span>(sId.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>))]) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的身份证地区非法&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出生日期验证</span></span><br><span class="line">    <span class="keyword">var</span> sBirthday = (</span><br><span class="line">            sId.<span class="title function_">substr</span>(<span class="number">6</span>, <span class="number">4</span>) +</span><br><span class="line">            <span class="string">&#x27;-&#x27;</span> +</span><br><span class="line">            <span class="title class_">Number</span>(sId.<span class="title function_">substr</span>(<span class="number">10</span>, <span class="number">2</span>)) +</span><br><span class="line">            <span class="string">&#x27;-&#x27;</span> +</span><br><span class="line">            <span class="title class_">Number</span>(sId.<span class="title function_">substr</span>(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line">        ).<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">Date</span>(sBirthday);</span><br><span class="line">    <span class="keyword">if</span> (sBirthday != d.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;/&#x27;</span> + (d.<span class="title function_">getMonth</span>() + <span class="number">1</span>) + <span class="string">&#x27;/&#x27;</span> + d.<span class="title function_">getDate</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;身份证上的出生日期非法&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 身份证号码校验</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">        weights = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">        codes = <span class="string">&#x27;10X98765432&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sId.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        sum += sId[i] * weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> last = codes[sum % <span class="number">11</span>]; <span class="comment">//计算出来的最后一位身份证号码</span></span><br><span class="line">    <span class="keyword">if</span> (sId[sId.<span class="property">length</span> - <span class="number">1</span>] != last) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你输入的身份证号非法&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="随机数范围"><a href="#随机数范围" class="headerlink" title="随机数范围"></a>随机数范围</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">random</span> = (<span class="params">min, max</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(min + <span class="title class_">Math</span>.<span class="title function_">random</span>() * (max + <span class="number">1</span> - min));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="将阿拉伯数字翻译成中文的大写数字"><a href="#将阿拉伯数字翻译成中文的大写数字" class="headerlink" title="将阿拉伯数字翻译成中文的大写数字"></a>将阿拉伯数字翻译成中文的大写数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">numberToChinese</span> = num =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">AA</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;零&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>, <span class="string">&#x27;七&#x27;</span>, <span class="string">&#x27;八&#x27;</span>, <span class="string">&#x27;九&#x27;</span>, <span class="string">&#x27;十&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">BB</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;十&#x27;</span>, <span class="string">&#x27;百&#x27;</span>, <span class="string">&#x27;仟&#x27;</span>, <span class="string">&#x27;萬&#x27;</span>, <span class="string">&#x27;億&#x27;</span>, <span class="string">&#x27;点&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = (<span class="string">&#x27;&#x27;</span> + num).<span class="title function_">replace</span>(<span class="regexp">/(^0*)/g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>),</span><br><span class="line">        k = <span class="number">0</span>,</span><br><span class="line">        re = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = a[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (k) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                re = <span class="variable constant_">BB</span>[<span class="number">7</span>] + re;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;0&#123;4&#125;//d&#123;&#x27;</span> + (a[<span class="number">0</span>].<span class="property">length</span> - i - <span class="number">1</span>) + <span class="string">&#x27;&#125;$&#x27;</span>).<span class="title function_">test</span>(a[<span class="number">0</span>]))</span><br><span class="line">                    re = <span class="variable constant_">BB</span>[<span class="number">4</span>] + re;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                re = <span class="variable constant_">BB</span>[<span class="number">5</span>] + re;</span><br><span class="line">                <span class="variable constant_">BB</span>[<span class="number">7</span>] = <span class="variable constant_">BB</span>[<span class="number">5</span>];</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">4</span> == <span class="number">2</span> &amp;&amp; a[<span class="number">0</span>].<span class="title function_">charAt</span>(i + <span class="number">2</span>) != <span class="number">0</span> &amp;&amp; a[<span class="number">0</span>].<span class="title function_">charAt</span>(i + <span class="number">1</span>) == <span class="number">0</span>) re = <span class="variable constant_">AA</span>[<span class="number">0</span>] + re;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>].<span class="title function_">charAt</span>(i) != <span class="number">0</span>) re = <span class="variable constant_">AA</span>[a[<span class="number">0</span>].<span class="title function_">charAt</span>(i)] + <span class="variable constant_">BB</span>[k % <span class="number">4</span>] + re;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 加上小数部分(如果有小数部分)</span></span><br><span class="line">        re += <span class="variable constant_">BB</span>[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a[<span class="number">1</span>].<span class="property">length</span>; i++) re += <span class="variable constant_">AA</span>[a[<span class="number">1</span>].<span class="title function_">charAt</span>(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (re == <span class="string">&#x27;一十&#x27;</span>) re = <span class="string">&#x27;十&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (re.<span class="title function_">match</span>(<span class="regexp">/^一/</span>) &amp;&amp; re.<span class="property">length</span> == <span class="number">3</span>) re = re.<span class="title function_">replace</span>(<span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="将数字转换为大写金额"><a href="#将数字转换为大写金额" class="headerlink" title="将数字转换为大写金额"></a>将数字转换为大写金额</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeToChinese</span> = <span class="title class_">Num</span> =&gt; &#123;</span><br><span class="line">    <span class="comment">//判断如果传递进来的不是字符的话转换为字符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Num</span> == <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Num</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="title class_">Num</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Num</span> = <span class="title class_">Num</span>.<span class="title function_">replace</span>(<span class="regexp">/,/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//替换tomoney()中的“,”</span></span><br><span class="line">    <span class="title class_">Num</span> = <span class="title class_">Num</span>.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//替换tomoney()中的空格</span></span><br><span class="line">    <span class="title class_">Num</span> = <span class="title class_">Num</span>.<span class="title function_">replace</span>(<span class="regexp">/￥/g</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//替换掉可能出现的￥字符</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="title class_">Num</span>)) &#123;</span><br><span class="line">        <span class="comment">//验证输入的字符是否为数字</span></span><br><span class="line">        <span class="comment">//alert(&quot;请检查小写金额是否正确&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//字符处理完毕后开始转换，采用前后两部分分别转换</span></span><br><span class="line">    <span class="keyword">var</span> part = <span class="title class_">String</span>(<span class="title class_">Num</span>).<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> newchar = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//小数点前进行转化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = part[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (part[<span class="number">0</span>].<span class="property">length</span> &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">//若数量超过拾亿单位，提示</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> tmpnewchar = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> perchar = part[<span class="number">0</span>].<span class="title function_">charAt</span>(i);</span><br><span class="line">        <span class="keyword">switch</span> (perchar) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;零&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;壹&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;贰&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;叁&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;肆&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;伍&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;陆&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;柒&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;捌&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                tmpnewchar = <span class="string">&#x27;玖&#x27;</span> + tmpnewchar;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (part[<span class="number">0</span>].<span class="property">length</span> - i - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&#x27;元&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;拾&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;佰&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;仟&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;拾&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;佰&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">if</span> (perchar != <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;仟&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&#x27;亿&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                tmpnewchar = tmpnewchar + <span class="string">&#x27;拾&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> newchar = tmpnewchar + newchar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小数点之后进行转化</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Num</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;.&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (part[<span class="number">1</span>].<span class="property">length</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// alert(&quot;小数点之后只能保留两位,系统将自动截断&quot;);</span></span><br><span class="line">            part[<span class="number">1</span>] = part[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; part[<span class="number">1</span>].<span class="property">length</span>; i++) &#123;</span><br><span class="line">            tmpnewchar = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            perchar = part[<span class="number">1</span>].<span class="title function_">charAt</span>(i);</span><br><span class="line">            <span class="keyword">switch</span> (perchar) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;零&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;壹&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;贰&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;叁&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;肆&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;伍&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;陆&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;柒&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;捌&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                    tmpnewchar = <span class="string">&#x27;玖&#x27;</span> + tmpnewchar;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;角&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) tmpnewchar = tmpnewchar + <span class="string">&#x27;分&#x27;</span>;</span><br><span class="line">            newchar = newchar + tmpnewchar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//替换所有无用汉字</span></span><br><span class="line">    <span class="keyword">while</span> (newchar.<span class="title function_">search</span>(<span class="string">&#x27;零零&#x27;</span>) != -<span class="number">1</span>) newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零零&#x27;</span>, <span class="string">&#x27;零&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零亿&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;亿万&#x27;</span>, <span class="string">&#x27;亿&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零万&#x27;</span>, <span class="string">&#x27;万&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零元&#x27;</span>, <span class="string">&#x27;元&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零角&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    newchar = newchar.<span class="title function_">replace</span>(<span class="string">&#x27;零分&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (newchar.<span class="title function_">charAt</span>(newchar.<span class="property">length</span> - <span class="number">1</span>) == <span class="string">&#x27;元&#x27;</span>) &#123;</span><br><span class="line">        newchar = newchar + <span class="string">&#x27;整&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newchar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断一个元素是否在数组中"><a href="#判断一个元素是否在数组中" class="headerlink" title="判断一个元素是否在数组中"></a>判断一个元素是否在数组中</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">contains</span> = (<span class="params">arr, val</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(val) != -<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组排序，-type-1：从小到大-2：从大到小-3：随机"><a href="#数组排序，-type-1：从小到大-2：从大到小-3：随机" class="headerlink" title="数组排序，{type} 1：从小到大 2：从大到小 3：随机"></a>数组排序，<code>&#123;type&#125; 1：从小到大 2：从大到小 3：随机</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sort</span> = (<span class="params">arr, type = <span class="number">1</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> a - b;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> b - a;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">unique</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;from&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> n = &#123;&#125;,</span><br><span class="line">            r = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!n[arr[i]]) &#123;</span><br><span class="line">                n[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">                r.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求两个集合的并集"><a href="#求两个集合的并集" class="headerlink" title="求两个集合的并集"></a>求两个集合的并集</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">union</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = a.<span class="title function_">concat</span>(b);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">unique</span>(newArr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求两个集合的交集"><a href="#求两个集合的交集" class="headerlink" title="求两个集合的交集"></a>求两个集合的交集</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">intersect</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    a = <span class="variable language_">this</span>.<span class="title function_">unique</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">map</span>(a, <span class="keyword">function</span> (<span class="params">o</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _this.<span class="title function_">contains</span>(b, o) ? o : <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除其中一个元素"><a href="#删除其中一个元素" class="headerlink" title="删除其中一个元素"></a>删除其中一个元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">remove</span> = (<span class="params">arr, ele</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> index = arr.<span class="title function_">indexOf</span>(ele);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="将类数组转换为数组"><a href="#将类数组转换为数组" class="headerlink" title="将类数组转换为数组"></a>将类数组转换为数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">formArray</span> = ary =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(ary)) &#123;</span><br><span class="line">        arr = ary;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(ary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">max</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="最小值"><a href="#最小值" class="headerlink" title="最小值"></a>最小值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">min</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre + cur;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">average</span> = arr =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">sum</span>(arr) / arr.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格"><a href="#去除空格-type-1-所有空格-2-前后空格-3-前空格-4-后空格" class="headerlink" title="去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格"></a>去除空格,<code>type: 1-所有空格 2-前后空格 3-前空格 4-后空格</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">trim</span> = (<span class="params">str, type</span>) =&gt; &#123;</span><br><span class="line">    type = type || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/(^\s*)/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/(\s*$)/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写"><a href="#字符转换，type-1-首字母大写-2：首字母小写-3：大小写转换-4：全部大写-5：全部小写" class="headerlink" title="字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写"></a>字符转换，<code>type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">changeCase</span> = (<span class="params">str, type</span>) =&gt; &#123;</span><br><span class="line">    type = type || <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\b\w+\b/g</span>, <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> word.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">toUpperCase</span>() + word.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">replace</span>(<span class="regexp">/\b\w+\b/g</span>, <span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> word.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">toLowerCase</span>() + word.<span class="title function_">substring</span>(<span class="number">1</span>).<span class="title function_">toUpperCase</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> str</span><br><span class="line">                .<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                .<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">word</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/[a-z]/</span>.<span class="title function_">test</span>(word)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> word.<span class="title function_">toUpperCase</span>();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> word.<span class="title function_">toLowerCase</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">toUpperCase</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> str.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="检测密码强度"><a href="#检测密码强度" class="headerlink" title="检测密码强度"></a>检测密码强度</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">checkPwd</span> = str =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Lv</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span> &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Lv</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">        <span class="title class_">Lv</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[a-z]/</span>.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">        <span class="title class_">Lv</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[A-Z]/</span>.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">        <span class="title class_">Lv</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[\.|-|_]/</span>.<span class="title function_">test</span>(str)) &#123;</span><br><span class="line">        <span class="title class_">Lv</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Lv</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="函数节流器"><a href="#函数节流器" class="headerlink" title="函数节流器"></a>函数节流器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">debouncer</span> = (<span class="params">fn, time, interval = <span class="number">200</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (time - (<span class="variable language_">window</span>.<span class="property">debounceTimestamp</span> || <span class="number">0</span>) &gt; interval) &#123;</span><br><span class="line">        fn &amp;&amp; <span class="title function_">fn</span>();</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">debounceTimestamp</span> = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="在字符串中插入新字符串"><a href="#在字符串中插入新字符串" class="headerlink" title="在字符串中插入新字符串"></a>在字符串中插入新字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">insertStr</span> = (<span class="params">soure, index, newStr</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> str = soure.<span class="title function_">slice</span>(<span class="number">0</span>, index) + newStr + soure.<span class="title function_">slice</span>(index);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="判断两个对象是否键值相同"><a href="#判断两个对象是否键值相同" class="headerlink" title="判断两个对象是否键值相同"></a>判断两个对象是否键值相同</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">isObjectEqual</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> aProps = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(a);</span><br><span class="line">    <span class="keyword">var</span> bProps = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (aProps.<span class="property">length</span> !== bProps.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aProps.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> propName = aProps[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a[propName] !== b[propName]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="16-进制颜色转-RGBRGBA-字符串"><a href="#16-进制颜色转-RGBRGBA-字符串" class="headerlink" title="16 进制颜色转 RGBRGBA 字符串"></a>16 进制颜色转 RGBRGBA 字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">colorToRGB</span> = (<span class="params">val, opa</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="regexp">/^(#?)[a-fA-F0-9]&#123;6&#125;$/</span>; <span class="comment">//16进制颜色值校验规则</span></span><br><span class="line">    <span class="keyword">var</span> isOpa = <span class="keyword">typeof</span> opa == <span class="string">&#x27;number&#x27;</span>; <span class="comment">//判断是否有设置不透明度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!pattern.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">        <span class="comment">//如果值不符合规则返回空字符</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> v = val.<span class="title function_">replace</span>(<span class="regexp">/#/</span>, <span class="string">&#x27;&#x27;</span>); <span class="comment">//如果有#号先去除#号</span></span><br><span class="line">    <span class="keyword">var</span> rgbArr = [];</span><br><span class="line">    <span class="keyword">var</span> rgbStr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = v.<span class="title function_">substring</span>(i * <span class="number">2</span>, i * <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(item, <span class="number">16</span>);</span><br><span class="line">        rgbArr.<span class="title function_">push</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rgbStr = rgbArr.<span class="title function_">join</span>();</span><br><span class="line">    rgbStr = <span class="string">&#x27;rgb&#x27;</span> + (isOpa ? <span class="string">&#x27;a&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;(&#x27;</span> + rgbStr + (isOpa ? <span class="string">&#x27;,&#x27;</span> + opa : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> rgbStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="追加-url-参数"><a href="#追加-url-参数" class="headerlink" title="追加 url 参数"></a>追加 url 参数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">appendQuery</span> = (<span class="params">url, key, value</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> options = key;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options == <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        options = &#123;&#125;;</span><br><span class="line">        options[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    options = $.<span class="title function_">param</span>(options);</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">includes</span>(<span class="string">&#x27;?&#x27;</span>)) &#123;</span><br><span class="line">        url += <span class="string">&#x27;&amp;&#x27;</span> + options;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += <span class="string">&#x27;?&#x27;</span> + options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>最后</strong></p></blockquote><p>来源知乎上的一篇文章，觉得挺实用的，就搬来这了</p><p><a href="https://www.zhihu.com/question/64606609/answer/1760237940">点击访问</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些时候，我们会遇到一些&lt;code&gt;小难题&lt;/code&gt;，但并不难，因为你只要肯花个时间，肯定是能解决的。你与其花这个时间，为何不快速解决之后，好继续写你的主要逻辑代码呢？&lt;/p&gt;
&lt;p&gt;比如你要判断</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js赖加载</title>
    <link href="http://sjhfuigashgrs.github.io/posts/4422.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/4422.html</id>
    <published>2022-10-19T01:09:32.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>解释:</strong><br>啥叫懒加载呢？字面意思就是：懒惰加载, 举个栗子：</p></blockquote><p>你去衣物实体店买东西，老板/工作人员肯定是拿出你喜欢的衣物，不可能把整个仓库的衣物都拿出来。</p><blockquote><p><strong>Tip</strong><br>赖加载又称按需加载</p></blockquote><hr><blockquote><p><strong>常用的场景就是：</strong></p></blockquote><p><em>很多页面有很多图片，只有你眼睛能看到地方才会加载图片，还没看到的地方，就先不加载，毕竟谁能保证，你肯定会完完整整得把页面的图片全部看一遍呢？你中途如果不看了，岂不是白加载了？</em></p><p><strong>本文案例也是围绕这个场景实现</strong></p><hr><blockquote><p><strong>优点:</strong></p></blockquote><ul><li><em>页面加载速度快</em></li><li><em>减轻服务器压力</em></li><li><em>节约流量</em></li><li><em>用户体验好…</em></li></ul><hr><blockquote><p><strong>接着：</strong></p></blockquote><p>我现在都喜欢用 Jquery，它实在是太方便了。记得第一次学 Javascript 的时候，原生的 Api 实在是有些繁琐，对第一次接触的人来说，实在是太长了，何况咱英语也就小学的水平。</p><p><strong><em>原生的</em></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;k&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong><em>Jquery 的</em></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#k&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这区别，所以应该不止我喜欢 jQuery 吧？</p><p>由于 jQuery 实在是太好用了，然后有很多大神，就写了很多插件，在 jQuery 的基础上写了很多的库!</p><p>比如这个网站上全是：<a href="https://www.jq22.com/" title="点击访问">点击访问</a></p><p>很多常用的需求，都能给你整出插件，比如啥：瀑布流呀，懒加载呀，轮播图呀…</p><p>有一说一，确实非常方便！！！</p><p>咳咳，说了些题外话 ，我也是小白，这方面的技术不是很懂。</p><p><strong>我们今天的主题是：<code>用原生/jq的lazyload插件写图片懒加载</code></strong></p><blockquote><p><strong>那么，上代码</strong></p></blockquote><p><strong>jQuery + <code>lazyload</code>库</strong></p><p><em>CSS</em></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>HTML</em></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;01.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;02.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;03.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;04.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;05.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-original</span>=<span class="string">&quot;06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>TIP<br><code>data-original</code>标签，基于 jQuery 的图片延迟加载插件，在用户滚动页面到图片之后才进行加载。对于有较多的图片的网页，使用图片延迟加载，能有效的提高页面加载速度。</p></blockquote><hr><blockquote><p>注意事项:<br><code>需要真正实现图片延迟加载，必须将真实图片地址写在data-original属性中。若src与·data-original·相同，则只是—个特效而已，并不达到延迟加载的功能。</code></p></blockquote><p><em>JavaScript</em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;=./jQuery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./jq.lazyload.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   ($)(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     $(<span class="string">&quot;img&quot;</span>).<span class="title function_">lazyload</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//渐变加载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">effect</span>: <span class="string">&quot;fadeIn&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>总结：</strong><br>十分无脑，不用关心原理，几行代码就能出效果.</p></blockquote><p><strong>原生</strong><br><em>css</em></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 设置宽高看能见效 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="comment">/* 为了有渐变显示 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>HTML</em></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;01.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;02.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;03.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;04.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;05.jpg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;06.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>JavaScript</em></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 获取img dom</span></span><br><span class="line"><span class="keyword">let</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line"><span class="comment">// 创建IntersectionObserver女朋友</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 当前元素可见时</span></span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">isIntersecting</span> == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">// 获取图片链接</span></span><br><span class="line"><span class="keyword">let</span> data_src = item.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-src&quot;</span>)</span><br><span class="line"><span class="comment">// 设置图片src属性</span></span><br><span class="line">item.<span class="property">target</span>.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, data_src)</span><br><span class="line"><span class="comment">// 将图片设置为完全可见</span></span><br><span class="line">item.<span class="property">target</span>.<span class="property">style</span>.<span class="property">opacity</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">// 关闭当前标签的监视</span></span><br><span class="line">observer.<span class="title function_">unobserve</span>(item.<span class="property">target</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 将所有的图片标签都套上</span></span><br><span class="line">el.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 开启监视图片标签</span></span><br><span class="line">observer.<span class="title function_">observe</span>(e)</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong> 总结：</strong> 相当轻便，低耦合</p></blockquote><ul><li>这里用到了一个 Js 的类：IntersectionObserver，有兴趣可以去详细了解了解</li></ul><hr><blockquote><p><strong>最后</strong></p></blockquote><pre><code>其实这些东西，没有什么优劣之分，仅仅只是工具，或者说是一种技术手段/方案，你觉得哪种合适就用哪种。</code></pre><p>我学习一种学知识的时候，也是直接<strong>懵了</strong>完全不懂，然后慢慢琢磨，发现，也不是那么完全理解不了的！</p><p><em>我很享受这种堆积在心底很久的困扰被解开的那一瞬间-的感觉。</em></p><p>就是那种突然醒悟，脑洞打开了.</p><blockquote><p><strong>古人云：</strong>朝闻道，夕死可矣</p></blockquote><p>读书的时候不懂，现在逐渐开始认同了</p><p><strong><code>加油!</code></strong>此刻的自己一定比过去那个时候的自己又获得提升，向更完美的自己迈进了一步！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;解释:&lt;/strong&gt;&lt;br&gt;啥叫懒加载呢？字面意思就是：懒惰加载, 举个栗子：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你去衣物实体店买东西，老板/工作人员肯定是拿出你喜欢的衣物，不可能把整个仓库的衣物都拿出来。&lt;/p&gt;
&lt;b</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/Js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Js" scheme="http://sjhfuigashgrs.github.io/tags/Js/"/>
    
  </entry>
  
  <entry>
    <title>最实用的JavaScript一行代码</title>
    <link href="http://sjhfuigashgrs.github.io/posts/8bf2.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/8bf2.html</id>
    <published>2022-09-28T16:29:47.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="tip info"><p>Talk is cheap, show me the code!<br>很简单：用简单的逻辑和尽可能少的代码行来解决一个复杂的问题。随着 ES6 箭头函数的引入，可以创建看起来优雅而简单的单行代码。<br>在今天的文章中，我将与你一起来学习 11 个罕见但功能强大的单行代码。现在，准备好，让我们开始吧！</p></div><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><div class="tip warning faa-horizontal animated-hover"><p>获取字符串中的字符数</p></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">characterCount</span> = (<span class="params">str, char</span>) =&gt; str.<span class="title function_">split</span>(char).<span class="property">length</span> - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>获取字符数是一个有用的实用程序，在许多情况下都很有用，我们可以使用它来获取空格数和随后的单词数，或者这可用于获取字符串中某个分隔符的计数。<br>这个想法很简单，我们使用传递的参数 char 拆分字符串并获取返回数组的长度。由于每次将字符串拆分，都会比拆分器多一个；所以减去 1，我们有一个 characterCount 单行。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>检查对象是否为空</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEmpty</span> = obj =&gt; <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj).<span class="property">length</span> === <span class="number">0</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br></pre></td></tr></table></figure><blockquote><p>检查对象的空性实际上比看起来要困难得多，即使对象为空，每次检查对象是否等于 {} 也会返回 false。<br>幸运的是，下面的单行代码正是我们想要的。<br>在这一行中，我们检查对象的键长度是否等于 0，以及传递的参数是否为实际对象。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>等待一段时间再执行</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">wait</span> = <span class="keyword">async</span> milliseconds =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, milliseconds));</span><br></pre></td></tr></table></figure><blockquote><p>在这一行中，我们将通过一些异步编程来弄脏我们的代码。这个想法很简单，在运行代码时，如果你想等待一定的时间，这里是等待单行<br>在等待单行中，我们创建一个承诺并在给定的时间后使用 setTimeout 函数解决它。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>获取两个日期之间的日差</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">daysBetween</span> = (<span class="params">date1, date2</span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(date1 - date2) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>));</span><br></pre></td></tr></table></figure><blockquote><p>在开发 Web 应用程序时，日期通常是实现起来最令人困惑的部分，因为有许多概念很容易被误算。<br>这是一个强大的单线计算两个日期之间的天差。但还有更多事情要做，正如我所做的那样，你可以创建自己的单线来计算月、年差异等。</p><p>这种单线背后的逻辑很容易理解。当两个日期相减时，返回值是以毫秒为单位的差值，要将毫秒转换为天，我们必须将其除以毫秒、秒、分钟和小时。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>检查设备上的触摸支持</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">touchSupported</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">    <span class="string">&#x27;ontouchstart&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> || (<span class="title class_">DocumentTouch</span> &amp;&amp; <span class="variable language_">document</span> <span class="keyword">instanceof</span> <span class="title class_">DocumentTouch</span>);</span><br></pre></td></tr></table></figure><blockquote><p>随着可以连接到互联网的设备越来越多，创建响应式网站的必要性也在增加。20 年前，开发者应该考虑网站的桌面版本，但今天超过 50% 的网络流量来自触摸移动设备。因此，基于设备的触控支持采取一些行动是一个非常重要的概念。<br>在这一行中，我们正在检查文档是否支持 touchstart 事件。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>在元素后插入 HTML 字符串</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">insertHTMLAfter</span> = (<span class="params">html, el</span>) =&gt; el.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterend&#x27;</span>, html);</span><br></pre></td></tr></table></figure><blockquote><p>开发 Web 应用程序时，使用 JavaScript 更新 DOM 是一件很常见的事情。有一些基本的方法可以完成工作，但是，当情况变得复杂时，就很难克服。<br>这是一个在 HTML 元素之后立即注入 HTML 字符串的单行代码。经过几分钟的思考和谷歌搜索，我相信你可以找到这个单线的以前版本。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>随机排列数组</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">shuffle</span> = arr =&gt; arr.<span class="title function_">sort</span>(<span class="function">() =&gt;</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure><blockquote><p>在开发中打乱一组数据是一个常见的情况，你可以随时遇到，不幸的是，JavaScript 中没有内置数组的 shuffle 方法。<br>但是，这里有一个你可以每天使用的 shuffle one-liner<br>它利用数组的排序方法，在数组的前一个元素之前或之后随机排序。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>获取随机布尔值</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getRandomBoolean</span> = (<span class="params"></span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">random</span>() &gt;= <span class="number">0.5</span>;</span><br></pre></td></tr></table></figure><blockquote><p>在开发时，尤其是在写游戏代码时，有时，我们会想随机采取行动。在这些情况下，下面的单行代码非常方便。<br>上面的单行代码有 50/50 的机会返回真或假。因为生成的随机数大于 0.5 的概率等于变小的概率。</p><p>然而，例如，如果你想得到一个概率为 70% 的随机布尔值，那么你可以简单地将 0.5 更改为 0.7 等等。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>计算数组的平均值</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">average</span> = arr =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b) / arr.<span class="property">length</span>;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用多种方法计算数组的平均值。但逻辑对所有人都是一样的，我们必须得到数组及其长度的总和；然后，通过除法给出平均值。<br>在平均单行中，我们使用 reduce 来获取一行中数组的总和，而不是使用循环。然后，我们将它除以数组长度，这是一个数组的平均值。</p></blockquote><p><p></p><br><div class="tip warning faa-horizontal animated-hover"><p>每隔 4 个空 1 格美团卷码</p></div></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...<span class="string">&#x27;088896520132&#x27;</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, itm, idx</span>) =&gt;</span> (res += idx % <span class="number">4</span> === <span class="number">1</span> ? <span class="string">`<span class="subst">$&#123;itm&#125;</span> `</span> : itm), <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 08 8896 5201 32</span></span><br></pre></td></tr></table></figure><p>转载: <a href="https://www.vvhan.com/practical-js.html">韩小韩</a><br><div class="note info simple"><p>END</p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;div class=&quot;tip info&quot;&gt;&lt;p&gt;Talk is cheap, show me the code!&lt;br&gt;很简单：用简单的逻辑和尽</summary>
      
    
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/categories/%E5%89%8D%E7%AB%AF/js/"/>
    
    
    <category term="前端" scheme="http://sjhfuigashgrs.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://sjhfuigashgrs.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>侧边栏标签修改</title>
    <link href="http://sjhfuigashgrs.github.io/posts/de85.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/de85.html</id>
    <published>2022-09-21T14:30:27.000Z</published>
    <updated>2022-11-01T17:34:59.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>逛别人博客时经常看见标签页后面加了一个数量，起初因为懒没弄，但是最近几天感觉标签确实有一点的不好看，于是决定改一下。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><div class="note info simple"><div class="hide-block"><button type="button" class="hide-button" style="">预览效果    </button><div class="hide-content"><div class="img-wrap"><div class="img-bg"><img class="img" src="https://image.anzhiy.cn/adminuploads/1/2022/09/03/6312d3e52835c.webp"/></div></div></div></div></div><details class="folding-tag" cyan><summary> 点击查看参考教程 </summary>              <div class='content'>              <p>基于安知鱼方案进行修改</p><div class="table-container"><table><thead><tr><th><strong>参考方向</strong></th><th><strong>教程原贴</strong></th></tr></thead><tbody><tr><td>安知鱼原教程</td><td><a href="https://anzhiy.cn/posts/7d58.html">侧边栏标签修改</a></td></tr></tbody></table></div>              </div>            </details><details class="folding-tag" cyan><summary> 点击查看侧边栏标签修改魔改教程 </summary>              <div class='content'>              <div class="tabs" id="card_tags"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#card_tags-1">page.js</button></li><li class="tab"><button type="button" data-href="#card_tags-2">css</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="card_tags-1"><p><strong>打开 <span class='p red'>butterfly\scripts\helpers\page.js</span> 文件</strong></p><p><strong>如果你只是想添加一个数量的话，在第 52 行的<span class='p red'>${tag.name}</span> 后增加 <span class='p red'>(${tag.length})</span> ,如下:</strong></p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  const length = sizes.length - 1</span><br><span class="line"><span class="deletion">- source.forEach(tag =&gt; &#123;</span></span><br><span class="line"><span class="addition">+ source.sort(&#x27;name&#x27;).forEach(tag =&gt; &#123;</span></span><br><span class="line">    const ratio = length ? sizes.indexOf(tag.length) / length : 0</span><br><span class="line">    const size = minfontsize + ((maxfontsize - minfontsize) * ratio)</span><br><span class="line">    let style = `font-size: $&#123;parseFloat(size.toFixed(2))&#125;$&#123;unit&#125;;`</span><br><span class="line">    const color = &#x27;rgb(&#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;)&#x27; // 0,0,0 -&gt; 200,200,200</span><br><span class="line">    style += ` color: $&#123;color&#125;`</span><br><span class="line"><span class="deletion">-   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;/a&gt;`</span></span><br><span class="line"><span class="addition">+   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;sup&gt;$&#123;tag.length&#125;&lt;/sup&gt;&lt;/a&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  return result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="card_tags-2"><p><strong>加入以下 css</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* tags样式 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-fontcolor) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.05rem</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-white) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--anzhiyu-shadow-theme);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1300px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.03</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-tag-cloud</span> <span class="selector-tag">a</span> <span class="selector-tag">sup</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>当然,你也可以按照自己的需要来书写 css 样式.</del></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><p>我自己魔改时遇到的一个 <span class='p blue'>bug</span>。</p><p>修改了 <span class='p gray'>page.js</span> 文件,但是并没有起到效果;就很头痛!</p><blockquote><del>修改方案:</del></blockquote><p>打开文件 <mark class="hl-label orange">=>\node_modules\hexo\lib\plugins\helper\tagcloud.js</mark> </p><p>找到有关于标签 html 属性生成的代码，并添加 <mark class="hl-label orange">${tag.length}</mark>  后执行 hexo 三连。</p><p><img src="https://img.wwery.com/Sugar/8vVjkPng.png" alt=""></p><u>最终解决问题!</u>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;逛别人博客时经常看见标签页后面加了一个数量，起初因为懒没弄，但是最近几天感觉标签确实有一点的不好看，于是决定改一下。&lt;/p&gt;
&lt;h2 id=</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://sjhfuigashgrs.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>何为框架</title>
    <link href="http://sjhfuigashgrs.github.io/posts/9968.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/9968.html</id>
    <published>2022-09-14T15:28:35.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p><strong>何为框架？为什么要学习框架技术？</strong></p></blockquote><p><em>本文将会围绕这个问题展开！</em></p><h2 id="框架的概念及作用"><a href="#框架的概念及作用" class="headerlink" title="框架的概念及作用"></a>框架的概念及作用</h2><blockquote><p><strong>概念：</strong></p></blockquote><ul><li><p>框架（Framework）是一种警告校验的、具有特定功能的半成品软件。</p></li><li><p>框架针对特定的功能或架构需要，对基础代码进行了封装并提供了相应的 <strong>API</strong> ，不同的框架能够提供不同的功能。</p></li><li><p>框架虽然可以实现特定功能，但又不是一套完整可运行的程序。</p></li><li><p>开发者需要在框架提供的功能或架构基础上，加入具体的业务逻辑，从而开发出一套自己的应用软件。</p></li></ul><blockquote><p><strong>作用：</strong></p></blockquote><ul><li>使用框架可以节省大量基础代码的编写工作，从而提高开发效率和开放速度。</li><li>为构建新的应用程序提供了极大的便利。</li><li>基于框架开发应用程序，框架就是应用的 <strong>“骨干”</strong> ，开发人员可以在这个 <strong>“骨干”</strong> 上添加自己的东西，组合出符合自己需要的应用程序。</li><li>框架提供了可以拿来即用的工具，更重要的是，框架提供了优秀的、可重用的设计。<strong>就如同想要制作一份看起来具有专业水准的 PPT 演示文稿 ，最便捷有效的方法就是使用 PPT 模板</strong> ，使用模板创建出来的 PPT 以及具有良好的设计风格，我们只需要把必要的信息套用进去即可。</li></ul><blockquote><p><strong>基于模板制作的 PPT 的优点：</strong></p></blockquote><ol><li>不必考虑布局、配色的等设计相关的专业问题，降低了制作难度。</li><li>可以专注于文档的内容，提高了效率。</li><li>新手也可以快速上手。</li></ol><p>此外，框架还有另一层面的价值，它使混乱的东西变的结构化、规范化。正如 <code>WebWork</code> 作者 <code>JBoos</code> 架构师 <code>Rickaed Oberg</code> 所说： <strong>“框架的强大之处不是源自它能让你做什么，而是它不能让你做什么”。</strong> 如果没有框架的话，N 个人将写出 N 中实现代码，且代码质量难免良莠不齐，而框架提供了优秀的架构设计，保证了应用程序的风格统一，且为基础功能提供了优质的实现。</p><p><strong>框架在规范与创新之间维持着合适的平衡，从企业的角度，这降低了人员培训成本，软件开发成本及维护，升级成本….</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p><strong>使用框架技术优势的总结：</strong></p></blockquote><ol><li>无需考虑开发中公共问题、基础问题，框架已经做好了实现。</li><li>库专注于项目的业务逻辑设计，提升开发效率，并且有助于提高核心业务的开发质量。</li><li>项目架构统一，便于沟通协作，便于修改维护。</li><li>框架汇集了软件分析、设计、实现等多方面的优秀经验，可以帮助开发快速构建优美、运行稳定且性能优良的高质量应用。</li></ol>]]></content>
    
    
    <summary type="html">框架（Framework）是一种警告校验的、具有特定功能的半成品软件。</summary>
    
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="技术相关" scheme="http://sjhfuigashgrs.github.io/tags/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>IE6/IE7不支持first-child的解决办法</title>
    <link href="http://sjhfuigashgrs.github.io/posts/85a2.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/85a2.html</id>
    <published>2022-09-02T15:43:32.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<p><strong>IE6/IE7 不支持 first-child 的解决办法</strong></p><p><strong><em>不废话,上代码！</em></strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">    <span class="attribute">border-top-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border-top-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-top-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#dad3d0</span>;</span><br><span class="line">    *<span class="attribute">border-top-style</span>: <span class="built_in">expression</span>(this.previousSibling == null ? <span class="string">&#x27;none&#x27;</span>: <span class="string">&#x27;solid&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>给你们科普一下 (๑•̀ㅂ•́)و✧）</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">previousSibling</span>; <span class="comment">// 可以获取到元素的兄节点，如果不存在兄节点，就说明这个元素为第一个节点。而expression是css表达式，可以理解为在css里可以书写javascript语句，那么</span></span><br><span class="line"><span class="title function_">expression</span>(<span class="variable language_">this</span>.<span class="property">previousSibling</span> == <span class="literal">null</span> ? <span class="string">&#x27;none&#x27;</span> : <span class="string">&#x27;solid&#x27;</span>); <span class="comment">// 的意思是，如果这个元素没有兄节点（也就是它是第一个节点），返回none，否则返回solid</span></span><br></pre></td></tr></table></figure><p><em>只有 IE6 和 IE7 能识别此行代码</em></p>]]></content>
    
    
    <summary type="html">IE6/IE7不支持first-child的解决办法</summary>
    
    
    
    <category term="Java" scheme="http://sjhfuigashgrs.github.io/categories/Java/"/>
    
    
    <category term="技术相关" scheme="http://sjhfuigashgrs.github.io/tags/%E6%8A%80%E6%9C%AF%E7%9B%B8%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis框架的缓存</title>
    <link href="http://sjhfuigashgrs.github.io/posts/5c18.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/5c18.html</id>
    <published>2022-09-02T15:37:31.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<p><em>正如大多数框架一样，<code>Mybatis</code> 框架也提供了缓存！</em></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><code>Mybatis</code> 框架的缓存分为两个级别。</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><blockquote><p><strong><code>Mybatis</code> 框架的一级缓存是默认是开启的。</strong></p></blockquote><p><code>Mybatis</code> 框架的一级缓存是基于 <code>PerpetualCache</code> 的 <code>HashMap</code> 本地缓存，默认是 <strong>SqlSession</strong> 级别的缓存，在 <strong>SqlSession</strong> 的生命周期内有效。当 <strong>SqlSession</strong> 关闭后，该 <strong>SqlSession</strong> 中所有的一级缓存会被清空。</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><blockquote><p><strong><code>Mybatis</code> 框架的二级缓存是默认是关闭的，</strong> 使用是需要在 <code>Mybatis</code> 核心配置文件中设置开启！</p></blockquote><p>二级缓存是 <strong>SqlSessionFactory</strong> 级别的，其作用域超出 <strong>SqlSession</strong> 范围，缓存中的数据可以被所有 <strong>SqlSession</strong> 共享。</p><h2 id="二级缓存使用方法"><a href="#二级缓存使用方法" class="headerlink" title="二级缓存使用方法"></a>二级缓存使用方法</h2><p>在 <code>Mybatis</code> 框架中使用二级缓存需要一下几个环节：</p><ol><li><p>在 <code>Mybatis</code> 框架的配置文件中设置全局开启二级缓存，代码如下</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>即使全局开启了二级缓存，默认情况下也是不使用二级缓存的。可以根据需要在 <strong>SQL</strong> 映射文件中（*Mapper.xml）中配置缓存，为当前 <strong>namespace</strong> 启用二级缓存，代码如下：</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.k.dao.sysUser.SysUserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">    <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>cache</strong> 元素中各种属性的作用介绍：</p><ul><li><strong>eviction</strong>：选择缓存回收策略，主要包括以下几种策略：<ul><li><strong>LRU</strong>：这是默认选项，最近最少回收，移除最长时间不被使用的缓存对象。</li><li><strong>FIFO：</strong>先进先出，按照对象进入缓存的顺序来移除它们。</li><li><strong>SOFT：</strong>软引用，移除基于垃圾回收器状态和软引用规则的对象。</li><li><strong>WEAK：</strong>弱引用，更积极地一出基于垃圾回收器和弱引用规则的对象。</li></ul></li><li><strong>flushInterval</strong>：设定缓存刷新间隔，以毫秒（ms）为单位设定缓存多长时间自动刷新一次，默认不自动刷新。</li><li><strong>size：</strong>设定缓存中最多存放多少个对象，默认是 1024.</li><li><strong>readOnly：</strong>设定缓存数据是否只读。默认是 <em>false</em> ，表示缓存数据会用于读写操作，<code>Mybatis</code> 框架会返回缓存的副本以避免脏读；<em>true</em> 表示缓存数据只会用于读操作，<code>Mybatis</code> 框架会为所有从缓存中获取数据的操作返回缓存对象得实例，以获得更好的性能。</li></ul></li><li><p>在 SQL 映射文件中配置支持二级缓存后，如需对个别查询进行调整，可以在 <code>select</code> 元素中单独设置，代码如下：</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;gitUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;sysuser&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>TIP</strong></p><p><code>Mybatis</code> 的核心是 SQL 管理，缓存并不是 <code>Mybatis</code> 所擅长的，所有应该采用 <code>Redis</code> 、<code>MongoDB</code> 等更专业的缓存技术会更加合理！</p></blockquote><p>完结撒花！</p><blockquote><p><strong>技术有限，如有错误，还请多多指教，谢谢！！！</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;正如大多数框架一样，&lt;code&gt;Mybatis&lt;/code&gt; 框架也提供了缓存！&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Mybatis</summary>
      
    
    
    
    <category term="Java" scheme="http://sjhfuigashgrs.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="http://sjhfuigashgrs.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何发布npm包</title>
    <link href="http://sjhfuigashgrs.github.io/posts/b427.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/b427.html</id>
    <published>2022-08-30T23:53:05.000Z</published>
    <updated>2022-11-01T17:34:59.330Z</updated>
    
    <content type="html"><![CDATA[<p><code>see</code> <a href="https://zhuanlan.zhihu.com/p/411524929">https://zhuanlan.zhihu.com/p/411524929</a></p><blockquote><p>验证是否登录</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm whoami</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">把喜欢的事情做到极致, 做给自己看, 也做给怀疑我们的世界看。</summary>
    
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>基于Buyyerfly添加wowjs特效</title>
    <link href="http://sjhfuigashgrs.github.io/posts/18ac.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/18ac.html</id>
    <published>2022-08-30T00:42:46.000Z</published>
    <updated>2022-11-01T17:34:59.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>添加 <a href="[Add Blog Animation -- Wowjs | Akilar の糖果屋](https://akilar.top/posts/abab51cf/">wowjs 特效</a><br>see <a href="https://www.npmjs.com/package/hexo-butterfly-wowjs">https://www.npmjs.com/package/hexo-butterfly-wowjs</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># wowjs</span><br><span class="line"># see https://www.npmjs.com/package/hexo-butterfly-wowjs</span><br><span class="line">wowjs:</span><br><span class="line">  enable: true #控制动画开关。true是打开，false是关闭</span><br><span class="line">  priority: 10 #过滤器优先级</span><br><span class="line">  mobile: false #移动端是否启用，默认移动端禁用</span><br><span class="line">  animateitem:</span><br><span class="line">    - class: recent-post-item #必填项，需要添加动画的元素的class</span><br><span class="line">      style: animate__zoomIn #必填项，需要添加的动画</span><br><span class="line">      duration: 1.5s #选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span><br><span class="line">      delay: 200ms #选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span><br><span class="line">      offset: 30 #选填项，开始动画的距离（相对浏览器底部）</span><br><span class="line">      iteration: 1 #选填项，动画重复的次数</span><br><span class="line">    - class: card-widget</span><br><span class="line">      style: animate__zoomIn</span><br><span class="line">      delay: 200ms</span><br><span class="line">    # - class: flink-list-card</span><br><span class="line">    #   style: wowpanels</span><br><span class="line">    - class: flink-list-card</span><br><span class="line">      style: animate__flipInY</span><br><span class="line">      duration: 3s</span><br><span class="line">    - class: flink-list-card</span><br><span class="line">      style: animate__animated</span><br><span class="line">      duration: 3s</span><br><span class="line">    - class: article-sort-item</span><br><span class="line">      style: animate__slideInRight</span><br><span class="line">      duration: 1.5s</span><br><span class="line">    - class: site-card</span><br><span class="line">      style: animate__flipInY</span><br><span class="line">      duration: 3s</span><br><span class="line">    - class: site-card</span><br><span class="line">      style: animate__animated</span><br><span class="line">      duration: 3s</span><br><span class="line">  animate_css: https://cdn.cbd.int/hexo-butterfly-wowjs/lib/animate.min.css</span><br><span class="line">  wow_js: https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow.min.js</span><br><span class="line">  wow_init_js: https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow_init.js</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;添加 &lt;a href=&quot;[Add Blog Animation -- Wowjs | Akilar の糖果屋](https://akilar.top/posts/abab51cf/&quot;&gt;wowjs 特效&lt;/a&gt;&lt;br&gt;see &lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="hexo" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/hexo/"/>
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="hexo" scheme="http://sjhfuigashgrs.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>基于 Butterfly 的外挂标签引入</title>
    <link href="http://sjhfuigashgrs.github.io/posts/7d58.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/7d58.html</id>
    <published>2022-08-30T00:04:13.000Z</published>
    <updated>2022-11-01T17:34:59.330Z</updated>
    
    <content type="html"><![CDATA[<ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><br /><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义 font awesome 图标</p></div><br /><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><br /><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div></li></ul>]]></content>
    
    
    <summary type="html">即使这个世界对你不好，你也不能丢了骄傲！</summary>
    
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="hexo" scheme="http://sjhfuigashgrs.github.io/categories/%E9%9A%8F%E7%AC%94/hexo/"/>
    
    
    <category term="随笔" scheme="http://sjhfuigashgrs.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="hexo" scheme="http://sjhfuigashgrs.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>活着本身就是一种勇气</title>
    <link href="http://sjhfuigashgrs.github.io/posts/2753.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/2753.html</id>
    <published>2022-08-29T23:51:06.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>活着本身就是一种勇气</strong></p></blockquote><p>之前看董宇辉的直播推荐了余华老师的活着 我就买了一本阅读了一下</p><p><img src="https://www.gpdf.net/wp-content/uploads/2021/01/s29652928.jpg" alt=""></p><p>我花了一晚上的时间阅读了一遍 虽说读的很快，但是我读完之后内心真想呐喊一遍，因为富贵太惨了，真的是人生四大悲</p><p>少年丧父母，中年丧配偶，老年丧独子，少子无良师。</p><p>故事的主人公叫福贵，是个地主家的公子哥，谈不上真傻，我认为他是作，喜欢赌博 并输光了家产，然后他爹也被气死了，老婆也被接回了娘家，输光家产后福贵就变的本分起来，最后媳妇也回到他身边，本来想好好生活的。好景不长，晚上去诊所给他娘拿药的时候被国民党抓了壮丁，历经曲折回了家。回到家后他母亲去世了 女儿也因为一场病变成了哑巴，也是一家四口团圆了。之后就土地革命 ，因为福贵输光了家产被定了贫农 也分到了地，日子也好点了，在那个大锅饭时代，也经常挨饿，有一次因为县长夫人生孩子大出血需要输血，无量医生为了巴结县长，吧有庆的血抽干了 有庆也死了，福贵亲手把儿子给埋了，也没敢告诉得了软骨病的家珍。他凤霞因为生孩子大出血，孩子保住了，但是凤霞确走了。苦根生下来就没有母亲，最后苦根的父亲也在搬货的时候被砸死了，苦根就跟着福贵生活，有一次苦根生病了，福贵给苦根煮了豆子吃结果苦根被豆子噎死了，最后就剩福贵和一头牛孤苦伶仃的活着</p><ul><li>读后感</li></ul><p>福贵真的是经历了太多的苦难了，正如董宇辉老师在直播间说的 即使生活不如意，但是请你别忘记你自己有勇气去面对这一切。</p><p>也许活着的生命意义是珍惜，也是一种勇气。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;活着本身就是一种勇气&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之前看董宇辉的直播推荐了余华老师的活着 我就买了一本阅读了一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.gpdf.net/wp-co</summary>
      
    
    
    
    <category term="生活" scheme="http://sjhfuigashgrs.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://sjhfuigashgrs.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>阳光不燥</title>
    <link href="http://sjhfuigashgrs.github.io/posts/b417.html"/>
    <id>http://sjhfuigashgrs.github.io/posts/b417.html</id>
    <published>2022-08-29T23:38:59.000Z</published>
    <updated>2022-11-01T17:34:59.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="夏至"><a href="#夏至" class="headerlink" title="夏至"></a>夏至</h1><blockquote><p>一生的时间很短<br>短到不过是两颗心之间的距离<br>一生的时间也很长<br>不如我们试着走走看</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;夏至&quot;&gt;&lt;a href=&quot;#夏至&quot; class=&quot;headerlink&quot; title=&quot;夏至&quot;&gt;&lt;/a&gt;夏至&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;一生的时间很短&lt;br&gt;短到不过是两颗心之间的距离&lt;br&gt;一生的时间也很长&lt;br&gt;不如我们试着走走看&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    <category term="生活" scheme="http://sjhfuigashgrs.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://sjhfuigashgrs.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
